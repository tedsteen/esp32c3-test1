const FONT_A_IDX: u8 = 0;
const FONT_0_IDX: u8 = 26;
const REAL_A_IDX: u8 = b'A';
const REAL_Z_IDX: u8 = b'Z';
const REAL_0_IDX: u8 = b'0';
const REAL_9_IDX: u8 = b'9';
pub const FONT_HEIGHT: usize = 6;
pub const FONT_WIDTH: u8 = 4;
const FONT_COUNT: usize = 39;
#[rustfmt::skip]
pub const FONT: [[u8; FONT_HEIGHT]; FONT_COUNT] = [
    [
        0b01100000,
        0b10010000,
        0b10010000,
        0b11110000,
        0b10010000,
        0b10010000,
    ],
    [
        0b11100000,
        0b10010000,
        0b11100000,
        0b10010000,
        0b10010000,
        0b11100000,
    ],
    [
        0b01100000,
        0b10010000,
        0b10000000,
        0b10000000,
        0b10010000,
        0b01100000,
    ],
    [
        0b11100000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b11100000,
    ],
    [
        0b11110000,
        0b10000000,
        0b11100000,
        0b10000000,
        0b10000000,
        0b11110000,
    ],
    [
        0b11110000,
        0b10000000,
        0b11100000,
        0b10000000,
        0b10000000,
        0b10000000,
    ],
    [
        0b01100000,
        0b10010000,
        0b10000000,
        0b10110000,
        0b10010000,
        0b01110000,
    ],
    [
        0b10010000,
        0b10010000,
        0b11110000,
        0b10010000,
        0b10010000,
        0b10010000,
    ],
    [
        0b11100000,
        0b01000000,
        0b01000000,
        0b01000000,
        0b01000000,
        0b11100000,
    ],
    [
        0b01110000,
        0b00010000,
        0b00010000,
        0b00010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b10010000,
        0b10100000,
        0b11000000,
        0b10100000,
        0b10010000,
        0b10010000,
    ],
    [
        0b10000000,
        0b10000000,
        0b10000000,
        0b10000000,
        0b10000000,
        0b11110000,
    ],
    [
        0b10010000,
        0b11110000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
    ],
    [
        0b10010000,
        0b11010000,
        0b10110000,
        0b10010000,
        0b10010000,
        0b10010000,
    ],
    [
        0b01100000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b11100000,
        0b10010000,
        0b10010000,
        0b11100000,
        0b10000000,
        0b10000000,
    ],
    [
        0b01100000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b10100000,
        0b01010000,
    ],
    [
        0b11100000,
        0b10010000,
        0b10010000,
        0b11100000,
        0b10010000,
        0b10010000,
    ],
    [
        0b01110000,
        0b10000000,
        0b01100000,
        0b00010000,
        0b00010000,
        0b11100000,
    ],
    [
        0b11110000,
        0b01000000,
        0b01000000,
        0b01000000,
        0b01000000,
        0b01000000,
    ],
    [
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b01010000,
        0b00100000,
    ],
    [
        0b10010000,
        0b10010000,
        0b10010000,
        0b10010000,
        0b11110000,
        0b10010000,
    ],
    [
        0b10010000,
        0b10010000,
        0b01100000,
        0b10010000,
        0b10010000,
        0b10010000,
    ],
    [
        0b10010000,
        0b10010000,
        0b01010000,
        0b00100000,
        0b00100000,
        0b00100000,
    ],
    [
        0b11110000,
        0b00100000,
        0b01000000,
        0b01000000,
        0b10000000,
        0b11110000,
    ],
    [
        0b01100000,
        0b10010000,
        0b10110000,
        0b11010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b00100000,
        0b01100000,
        0b00100000,
        0b00100000,
        0b00100000,
        0b01110000,
    ],
    [
        0b01100000,
        0b10010000,
        0b00010000,
        0b01100000,
        0b10000000,
        0b11110000,
    ],
    [
        0b01100000,
        0b10010000,
        0b00100000,
        0b00010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b00100000,
        0b01100000,
        0b10100000,
        0b11110000,
        0b00100000,
        0b00100000,
    ],
    [
        0b11110000,
        0b10000000,
        0b11100000,
        0b00010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b01100000,
        0b10000000,
        0b11100000,
        0b10010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b11110000,
        0b00010000,
        0b00100000,
        0b01000000,
        0b01000000,
        0b01000000,
    ],
    [
        0b01100000,
        0b10010000,
        0b01100000,
        0b10010000,
        0b10010000,
        0b01100000,
    ],
    [
        0b01100000,
        0b10010000,
        0b10010000,
        0b01110000,
        0b00010000,
        0b01100000,
    ],
    [
        0b10000000,
        0b10000000,
        0b10000000,
        0b10000000,
        0b00000000,
        0b10000000,
    ],
    [
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
        0b00000000,
        0b10000000,
    ],
    [
        0b00000000,
        0b01000000,
        0b00000000,
        0b00000000,
        0b01000000,
        0b00000000,
    ],
];

pub fn get_font_data(ch: &char) -> Option<&[u8; FONT_HEIGHT]> {
    let ch = ch.to_ascii_uppercase();

    if (REAL_A_IDX..=REAL_Z_IDX).contains(&(ch as u8)) {
        return FONT.get((ch as u8 - REAL_A_IDX + FONT_A_IDX) as usize);
    } else if (REAL_0_IDX..=REAL_9_IDX).contains(&(ch as u8)) {
        return FONT.get((ch as u8 - REAL_0_IDX + FONT_0_IDX) as usize);
    } else if ch as u8 == b'!' {
        return Some(&FONT[36]);
    } else if ch as u8 == b'.' {
        return Some(&FONT[37]);
    } else if ch as u8 == b':' {
        return Some(&FONT[38]);
    }
    None
}
